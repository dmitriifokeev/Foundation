import { useRef } from "react";
import { Swiper, SwiperSlide } from "swiper/react";
import { Navigation, Pagination, EffectFade } from "swiper/modules";
import bgBlueLines from "../../assets/img/bgBlueLines.jpg";

// TODO: –ù–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã 2 —Å–ª–∞–π–¥–µ—Ä–∞

// import videoThumbnail from "../../assets/img/videoThumbnail.jpg"; // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –≤–∏–¥–µ–æ
import NavigationButtons from "../../UI/NavigationButton";

const steps = [
  {
    id: 1,
    title: "–ö–æ—Ä–æ—Ç–∫–∏–µ –≤–∏–¥–µ–æ —É—Ä–æ–∫–∏",
    description: [
      "–ö–æ—Ä–æ—Ç–∫–∏–µ –≤–∏–¥–µ–æ —É—Ä–æ–∫–∏ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ç–µ–º—É –¥–ª–∏–Ω–æ–π –≤ —Å—Ä–µ–¥–Ω–µ–º 10 –º–∏–Ω.",
      "–í—Å—è –≤–æ–¥–∞ –∏ –ø—Ä–æ—á–∞—è –±–æ–ª—Ç–æ–≤–Ω—è –≤—ã—Ä–µ–∑–∞–Ω–∞ –∏ –≤—ã–±—Ä–æ—à–µ–Ω–∞.",
    ],
    buttonText: "–í–∏–¥–µ–æ —É—Ä–æ–∫–∏",
    contentType: "iframe",
    contentValue: "https://rutube.ru/play/embed/70f564e084ca04c7c78e49760cf277a6/", // üîπ –í–∏–¥–µ–æ —Å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞
  },
  {
    id: 2,
    title: "–ü—Ä–∞–∫—Ç–∏–∫–∞",
    description: [
      "–ö–∞–∂–¥—ã–π —É—Ä–æ–∫ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞–µ—Ç—Å—è –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏.",
      "–ó–∞–¥–∞—á–∏ —Ä–∞–∑–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–º–æ–≥–∞—é—Ç –≥–ª—É–±–∂–µ –ø–æ–Ω—è—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª.",
    ],
    buttonText: "–ü—Ä–∞–∫—Ç–∏–∫–∞",
    contentType: "image",
    contentValue: bgBlueLines, // üîπ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
  },
  {
    id: 3,
    title: "–ü—Ä–æ–µ–∫—Ç—ã",
    description: [
      "–§–∏–Ω–∞–ª—å–Ω—ã–π —ç—Ç–∞–ø ‚Äî —Ä–∞–±–æ—Ç–∞ –Ω–∞–¥ –ø—Ä–æ–µ–∫—Ç–∞–º–∏ –¥–ª—è –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ.",
      "–í—ã —Å–æ–∑–¥–∞–µ—Ç–µ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã —Å –Ω—É–ª—è.",
    ],
    buttonText: "–ü—Ä–æ–µ–∫—Ç—ã",
    contentType: "video",
    contentValue: "https://downloader.disk.yandex.ru/disk/YOUR_VIDEO_FILE", // üîπ –í–∏–¥–µ–æ-—Ñ–∞–π–ª
  },
];

export default function LearningProcessSection() {
  const prevButtonRef = useRef(null);
  const nextButtonRef = useRef(null);

  return (
    <section className="pt-100 sm:pb-60 ">
      <div className="container m-auto">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <h2 className="mb-32 lg:h1 h2 text-neutral-900 lg:text-neutral-900">
          –ü—Ä–æ—Ü–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è <br /> —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ <span className="text-primary-500">3-—Ö —ç—Ç–∞–ø–æ–≤</span>
        </h2>

        {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–ª–∞–π–¥–µ—Ä–∞ */}
        <div className="p-[8px] sm:p-[20px] bg-neutral-100 rounded-xl">
          <div className="p-[8px] sm:pt-[20px] sm:px-[20px] sm:pb-[32px] bg-white rounded-xl">
            <div className="grid grid-cols-1 grid-rows-[auto_auto_auto_auto] sm:grid-cols-[40%_60%] lg:grid-cols-[50%_50%] lg:px-40 sm:grid-rows-[auto_auto_auto] gap-8 py-[20px]  bg-white rounded-xl ">
              <div className="mb-20 sm:justify-center sm:flex sm:col-start-2 sm:col-end-3 sm:row-start-1 sm:row-end-2 sm:mb-0">
                <div className="sm:mt-4 custom-swiper-pagination "></div>
              </div>

              {/* –ü–µ—Ä–≤—ã–π Swiper (—Ç–µ–∫—Å—Ç) */}
              <div className="text-center sm:mr-8 sm:text-left col-start-1 col-end-2 row-start-2 row-end-3 lg:max-w-[80%] sm:col-start-1 sm:col-end-2 sm:row-start-2 sm:row-end-3 mb-20 sm:mb-0 sm:mt-20">
                <Swiper
                  effect="fade"
                  fadeEffect={{ crossFade: true }}
                  allowTouchMove={false}
                  modules={[Pagination, Navigation, EffectFade]}
                  pagination={{
                    clickable: true,
                    el: ".custom-swiper-pagination",
                    renderBullet: (index, className) => {
                      return `<span class="${className} custom-pagination-bullet">${steps[index].buttonText}</span>`;
                    },
                  }}
                  navigation={{
                    prevEl: prevButtonRef.current,
                    nextEl: nextButtonRef.current,
                  }}
                  onBeforeInit={(swiper) => {
                    swiper.params.pagination.el = ".custom-swiper-pagination";
                    swiper.params.navigation.prevEl = prevButtonRef.current;
                    swiper.params.navigation.nextEl = nextButtonRef.current;
                  }}
                  slidesPerView={1}
                  spaceBetween={10}
                >
                  {steps.map((step) => (
                    <SwiperSlide key={step.id}>
                      <div className="rounded-xl">
                        {/* –û–ø–∏—Å–∞–Ω–∏–µ —ç—Ç–∞–ø–∞ */}
                        <div>
                          <h3 className="mb-20 sm:mb-[20px] lg:h2 h3 text-neutral-900 lg:text-neutral-900">
                            {step.title}
                          </h3>
                          <ul className="space-y-12 text-neutral-600 lg:body-18 body-14 lg:text-neutral-600">
                            {step.description.map((text, idx) => (
                              <li key={idx}>{text}</li>
                            ))}
                          </ul>
                        </div>
                      </div>
                    </SwiperSlide>
                  ))}
                </Swiper>
              </div>

              {/* –í—Ç–æ—Ä–æ–π Swiper (–∫–æ–Ω—Ç–µ–Ω—Ç: iframe, img, video) */}
              <div className="col-start-1 col-end-2 row-start-3 row-end-4 mb-32 sm:col-start-2 sm:col-end-3 sm:row-start-2 sm:row-end-3">
                <Swiper
                  modules={[Pagination, Navigation]}
                  allowTouchMove={false}
                  pagination={{
                    clickable: true,
                    el: ".custom-swiper-pagination",
                    renderBullet: (index, className) => {
                      return `<span class="${className} custom-pagination-bullet ">${steps[index].buttonText}</span>`;
                    },
                  }}
                  navigation={{
                    prevEl: prevButtonRef.current,
                    nextEl: nextButtonRef.current,
                  }}
                  onBeforeInit={(swiper) => {
                    swiper.params.pagination.el = ".custom-swiper-pagination";
                    swiper.params.navigation.prevEl = prevButtonRef.current;
                    swiper.params.navigation.nextEl = nextButtonRef.current;
                  }}
                  slidesPerView={1}
                  spaceBetween={10}
                >
                  {steps.map((step) => (
                    <SwiperSlide key={step.id} className="h-[300px] sm:h-[250px]">
                      <div className="flex items-center justify-center h-full ">
                        {/* –í—ã–±–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ `contentType` */}
                        {step.contentType === "iframe" && (
                          <iframe
                            className="w-full h-full rounded-xl"
                            src="https://www.youtube.com/embed/6XOXMuN3Xwo?si=SW_SejIKRRzBGo7n"
                            title="YouTube video player"
                            allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
                          ></iframe>
                        )}

                        {step.contentType === "image" && (
                          <img
                            src={step.contentValue}
                            alt="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
                            className="object-cover w-full h-full rounded-xl"
                          />
                        )}

                        {step.contentType === "video" && (
                          <video controls className="w-full h-full rounded-xl">
                            <source src={step.contentValue} type="video/mp4" />
                            –í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ.
                          </video>
                        )}
                      </div>
                    </SwiperSlide>
                  ))}
                </Swiper>
              </div>
              {/* –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ */}
              <div className="relative grid row-start-4 row-end-5 sm:col-start-1 sm:col-end-3 ">
                <div className="relative flex justify-center">
                  <div className=" sm:bottom-0 bottom-32">
                    <NavigationButtons
                      prevButtonRef={prevButtonRef}
                      nextButtonRef={nextButtonRef}
                    />
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
  );
}
