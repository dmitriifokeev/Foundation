import { v4 as uuidv4 } from "uuid";
import reactJsEssentialData from "./reactJsEssentialData";
import reactEssential from "../../../assets/img/bgCourseCards/reactEssential.jpg";

const reactJsEssentialProgram = {
  programHeader: {
    title: "Курс по React JS",
    tag: "Со знанием JS и HTML",
    heroSubtitle:
      "Ультимативный курс по React JS + Полное изучение библиотек экосистемы React ( Redux / Router ) Бонус - полный курс по Tailwind CSS",
    type: "Курс",
    bgImg: reactEssential,
    difficulty: 2,
  },

  program: [
    {
      id: uuidv4(),
      title: "Подготовка",
      info: "5 лекций • 33м",
      lessons: [
        { lesson: "Добро пожаловать на курс", time: "00:31" },
        { lesson: "Скачиваем материалы к курсу", time: "00:16" },
        { lesson: "Подготовка и проверка ПО", time: "07:28" },
        { lesson: "Настройка VS Code для курса", time: "11:39" },
        { lesson: "Как проходить курс", time: "12:42" },
      ],
    },
    {
      id: uuidv4(),
      title: "Вспоминаем основное из JS (Опционально)",
      info: "14 лекций • 1ч 51м",
      lessons: [
        { lesson: "Как работают функции. Типы функций в JS", time: "13:19" },
        { lesson: "Вспоминаем метод find()", time: "04:25" },
        { lesson: "Деструктуризация массивов и объектов", time: "09:06" },
        { lesson: "Операторы Rest & Spread", time: "14:57" },
        { lesson: "`${Template Literals}` - шаблонные строки", time: "04:01" },
        { lesson: "If  else  Тернарный оператор ?", time: "06:53" },
        { lesson: "Логические операторы &&, ||, ??", time: "07:28" },
        { lesson: "Опциональная цепочка?.", time: "05:14" },
        { lesson: "Метод Map()", time: "07:58" },
        { lesson: "Метод filter()", time: "05:34" },
        { lesson: "Метод reduce()", time: "03:23" },
        { lesson: "Метод sort()", time: "08:05" },
        { lesson: "Асинхронность в JS Промисы", time: "10:58" },
        { lesson: "Асинхронность в JS Async / Await", time: "09:12" },
        { lesson: "Тест по JS (Опционально. Для самопроверки)", time: "10 questions" },
      ],
    },
    {
      id: uuidv4(),
      title: "Мини-курс по ChatGPT для обучения и работы (Опционально)",
      info: "12 лекций • 1ч 11м",
      lessons: [
        { lesson: "Обзор нейросетей", time: "11:24" },
        { lesson: "Лучшие модели искусственного интеллекта на сегодня", time: "04:56" },
        { lesson: "Как оплатить подписку на Chat GPT", time: "04:38" },
        { lesson: "Обзор тарифов Chat GPT", time: "05:48" },
        { lesson: "Программа Chat GPT на разные операционные системы", time: "02:56" },
        { lesson: "Используем Chat GPT для обучения", time: "07:09" },
        { lesson: "Используем Chat GPT для программирования", time: "09:52" },
        { lesson: "Где еще полезен Chat GPT", time: "03:03" },
        { lesson: "Как показывать экран чату GPT", time: "04:51" },
        { lesson: "Генерация изображений с помощью Chat GPT и не только", time: "06:03" },
        { lesson: "Advanced Voice mode в Chat GPT", time: "03:57" },
        { lesson: "Как работает Copilot от GitHub", time: "06:30" },
      ],
    },
    {
      id: uuidv4(),
      title: "Введение в React. (Props / Components / JSX)",
      info: "18 лекций • 2ч 36м",
      lessons: [
        { lesson: "Как создать новый проект React", time: "13:56" },
        { lesson: "Hello React! Структура приложения React", time: "09:15" },
        { lesson: "Знакомство с компонентами", time: "10:17" },
        { lesson: "Как создается компонент 'под капотом' (CreateReactElement)", time: "04:12" },
        { lesson: "Как работает JSX", time: "09:27" },
        {
          lesson: "Условный рендеринг JSX. Отображение части компонента исходя из условий",
          time: "10:08",
        },
        { lesson: "Как работает CSS в React", time: "08:38" },
        { lesson: "Как работают пути к файлам и папкам в проекте vite", time: "14:33" },
        { lesson: "Правила JSX. Промежуточный итог", time: "06:13" },
        { lesson: "Что такое Props", time: "09:18" },
        { lesson: "#1-PRACTICE. Работа с Props - (Level 2)", time: "16:05" },
        { lesson: "Подводим итоги. Работа с Props", time: "04:10" },
        { lesson: "Рендеринг компонентов с помощью метода map()", time: "09:01" },
        { lesson: "Деструктуризация Props", time: "04:01" },
        { lesson: "Что такое <> React Fragment </>", time: "02:53" },
        { lesson: "3 типа условного рендеринга", time: "09:55" },
        { lesson: "Доп практика с тернарным оператором ?", time: "04:42" },
        { lesson: "#2-PRACTICE. Работа с Props часть 2 - (Level 2)", time: "09:17" },
        { lesson: "Тест по блоку 'Введение в React' - (Level 2)", time: "8 questions" },
      ],
    },
    {
      id: uuidv4(),
      title: "Углубление в основы React (useState & Events)",
      info: "10 лекций • 1ч 24м",
      lessons: [
        { lesson: "Как работают события в React", time: "08:33" },
        { lesson: "Первый Хук - useState()", time: "05:30" },
        { lesson: "Обновление состояния на основе прошлого состояния", time: "09:06" },
        { lesson: "Разница state и переменных", time: "02:49" },
        { lesson: "Что значат декларативный и императивный подход", time: "02:44" },
        { lesson: "Условный рендеринг с useState()", time: "12:07" },
        { lesson: "onMouseEnter с useState. Наведение на элемент", time: "07:49" },
        { lesson: "Устанавливаем React DevTools", time: "03:32" },
        { lesson: "#3-PRACTICE - StateTabs (Level 2)", time: "18:30" },
        { lesson: "#4-PRACTICE - StateCalculator (Level 2)", time: "13:33" },
        { lesson: "Тест по блоку 'Углубление в основы React' - (Level 2)", time: "10 questions" },
      ],
    },
    {
      id: uuidv4(),
      title: "#01-PROJECT - TaskList - (Level 3)",
      info: "7 лекций • 1ч 44м",
      lessons: [
        { lesson: "Обзор проекта", time: "04:17" },
        { lesson: "Создаем структуру приложения", time: "21:03" },
        { lesson: "Условный рендеринг для открытия и закрытия окон", time: "11:07" },
        { lesson: "Создаем массив с задачами", time: "18:37" },
        { lesson: "Делим массив задач на активные и выполненные", time: "11:03" },
        { lesson: "Добавляем функциональность и логику приложению", time: "14:01" },
        { lesson: "Настраиваем кнопки сортировки задач", time: "23:31" },
      ],
    },
    {
      id: uuidv4(),
      title: "Важные возможности Props",
      info: "10 лекций • 1ч 56м",
      lessons: [
        { lesson: "Структура файлов React приложения", time: "16:44" },
        { lesson: "Как создать универсальный компонент", time: "12:53" },
        { lesson: "Что такое PropTypes и как их использовать", time: "08:29" },
        { lesson: "Как работает {children} prop", time: "07:16" },
        { lesson: "Что такое проброс Props (Props drilling)", time: "06:50" },
        { lesson: "Что такое композиция компонентов", time: "10:17" },
        { lesson: "Завершаем создание UI Библиотеки", time: "07:29" },
        { lesson: "Явная передача компонента через Props", time: "06:06" },
        { lesson: "Подводим итоги секции курса", time: "06:46" },
        { lesson: "#5-PRACTICE - Универсальное модальное окно - (Level-2)", time: "33:21" },
        { lesson: "Тест по блоку 'Важные возможности Props' - (Level-2)", time: "8 questions" },
      ],
    },
    {
      id: uuidv4(),
      title: "UseEffect хук",
      info: "17 лекций • 2ч 35м",
      lessons: [
        { lesson: "Подключаемся к Weather API", time: "04:49" },
        { lesson: "Используем useState в логике рендера функции", time: "08:46" },
        { lesson: "Знакомство с useEffect() хуком", time: "12:21" },
        { lesson: "Подробнее про useEffect()", time: "09:41" },
        { lesson: "Обработка ошибок часть 1", time: "13:08" },
        { lesson: "Обработка ошибок часть 2", time: "07:41" },
        { lesson: "Используем данные полученные от API", time: "05:21" },
        { lesson: "Как работает массив зависимостей в useEffect()", time: "07:59" },
        { lesson: "Что будет если не использовать массив зависимостей в useEffect", time: "04:35" },
        { lesson: "Добавляем условную логику", time: "07:52" },
        { lesson: "Добавляем функциональность геолокации", time: "13:18" },
        { lesson: "Что такое Side Effects? Примеры Side Effects", time: "08:10" },
        { lesson: "Как работает функция очистки в useEffect()", time: "08:23" },
        { lesson: "Что такое гонка состояний?", time: "06:07" },
        { lesson: "Как с помощью обработчиков событий работать с Side Effects", time: "12:03" },
        { lesson: "#6-PRACTICE-Калькулятор обмена валют (Level-2)", time: "13:04" },
        { lesson: "#7-PRACTICE-Добавляем таймер в проект Task List (Level-2)", time: "11:32" },
        { lesson: "Тест по блоку 'useEffect' - (Level-2)", time: "10 questions" },
      ],
    },
    {
      id: uuidv4(),
      title: "#02-PROJECT-Калькулятор обмена валют",
      info: "4 лекции • 28м",
      lessons: [
        { lesson: "Обзор проекта", time: "04:49" },
        { lesson: "Создаем калькулятор валют часть 1", time: "09:46" },
        { lesson: "Создаем калькулятор валют часть 2", time: "05:58" },
        { lesson: "Создаем калькулятор валют часть 3", time: "07:46" },
      ],
    },
    {
      id: uuidv4(),
      title: "Необходимая теория работы React",
      info: "13 лекций • 1ч 19м",
      lessons: [
        { lesson: "Обзор секции", time: "02:10" },
        { lesson: "Классовые VS Функциональные компоненты", time: "05:13" },
        { lesson: "Компоненты, копии компонентов, элементы", time: "05:47" },
        { lesson: "Что такое 'Рендеринг' на самом деле", time: "06:17" },
        { lesson: "Что такое виртуальный DOM", time: "05:17" },
        { lesson: "Что такое Fiber Tree", time: "09:10" },
        { lesson: "Разбираем схему рендеринга", time: "05:38" },
        { lesson: "Что такое мемоизация и зачем она нужна", time: "08:44" },
        { lesson: "Разбираем фазу коммита", time: "04:18" },
        { lesson: "Почему необходимо использовать key prop", time: "09:19" },
        { lesson: "Как работает пакетное обновление в React", time: "07:08" },
        { lesson: "Про Монтирование и Размонтирование компонентов", time: "04:16" },
        { lesson: "Различия Frameworks VS Libraries", time: "05:13" },
        { lesson: "Тест по блоку 'Необходимая теория' - (Level-2)", time: "12 questions" },
      ],
    },
    {
      id: uuidv4(),
      title: "useRef хук и создание своего хука",
      info: "4 лекции • 36м",
      lessons: [
        { lesson: "Переменные vs useState vs useRef", time: "08:45" },
        { lesson: "Используем useRef для доступа к элементам", time: "08:53" },
        { lesson: "Итог: useRef", time: "03:07" },
        { lesson: "Как создать свой собственный хук", time: "15:11" },
        {
          lesson: "Тест по блоку useRef хук и создание своего хука - (Level 2)",
          time: "5 questions",
        },
      ],
    },
    {
      id: uuidv4(),
      title: "React Router 6.4+ (Без подгрузки данных)",
      info: "20 лекций • 2ч 53м",
      lessons: [
        { lesson: "Настраиваем проект", time: "04:01" },
        { lesson: "Создаем страницы с помощью React Router", time: "12:37" },
        { lesson: "Как создать ссылки в React Router с помощью <Link/>", time: "05:12" },
        { lesson: "Как создать навигационное меню с помощью <NavLink/>", time: "03:34" },
        { lesson: "Разница между компонентами и страницами", time: "05:50" },
        { lesson: "Абсолютный vs относительный путь в ссылках", time: "02:23" },
        { lesson: "Второй вариант использования компонента на странице", time: "05:21" },
        { lesson: "Как работает компонент <Outlet/>", time: "10:02" },
        { lesson: "Что такое атрибут index в параметрах маршрута", time: "02:11" },
        { lesson: "Как работает useParams хук", time: "24:18" },
        { lesson: "Условный рендеринг продуктов", time: "08:31" },
        { lesson: "Как работает useSearchParams хук", time: "10:40" },
        { lesson: "Используем Query string в проекте", time: "10:19" },
        { lesson: "Как работает useLocation хук", time: "12:20" },
        { lesson: "Как работает useNavigate хук", time: "12:04" },
        { lesson: "Как работает <Navigate/> компонент", time: "04:09" },
        { lesson: "Дополнительные атрибуты ссылок", time: "03:47" },
        { lesson: "Итог: Link vs Navigate vs useNavigate", time: "03:30" },
        { lesson: "Сравнение старого и нового синтаксиса React Router", time: "02:37" },
        { lesson: "#8-PRACTICE-React Router (Level-2)", time: "29:30" },
        { lesson: "Тест по блоку React Router 6.4+ - (Level 2)", time: "10 questions" },
      ],
    },
    {
      id: uuidv4(),
      title: "Tailwind course & CSS Modules (Опциональный блок)",
      info: "24 лекции • 2ч 32м",
      lessons: [
        { lesson: "Обзор блока курса", time: "01:18" },
        { lesson: "Как работают CSS модули", time: "09:45" },
        { lesson: "Настраиваем Tailwind", time: "12:35" },
        { lesson: "Работа с цветами в Tailwind", time: "04:33" },
        { lesson: "Как создавать собственные палитры цветов", time: "03:55" },
        { lesson: "Работа с текстовыми стилями в Tailwind", time: "05:51" },
        { lesson: "Padding & Margin & Height & Weight в Tailwind", time: "05:25" },
        { lesson: "Свойство Display и отступы у дочерних элементов", time: "02:48" },
        { lesson: "FlexBox в Tailwind", time: "04:17" },
        { lesson: "CSS Grid в Tailwind", time: "03:21" },
        { lesson: "Абсолютное позиционирование в Tailwind", time: "07:57" },
        { lesson: "Работа с градиентом и кастомизация темы Tailwind", time: "10:39" },
        { lesson: "Объединение классов используя директиву @apply", time: "04:08" },
        { lesson: "Создание UI компонента вместо @apply", time: "05:51" },
        { lesson: "Работа с объектом state NavLink", time: "05:18" },
        { lesson: "Подключаем свои шрифты в проект", time: "02:32" },
        { lesson: "Как работает адаптивный дизайн Tailwind", time: "05:26" },
        { lesson: "Псевдо классы и класс group:", time: "05:53" },
        { lesson: "Как работает класс peer:", time: "02:24" },
        { lesson: "Как работают animation в Tailwind", time: "04:40" },
        { lesson: "Как работают плагины в Tailwind", time: "11:48" },
        { lesson: "#9-PRACTICE Заканчиваем проект часть 1 (Level-2)", time: "18:31" },
        { lesson: "Заканчиваем проект часть 2 (Опционально)", time: "09:26" },
        { lesson: "Заканчиваем проект часть 3 (Опционально)", time: "03:57" },
      ],
    },
    {
      id: uuidv4(),
      title: "React Router 6.4+ (С подгрузкой данных)",
      info: "8 лекций • 1ч 14м",
      lessons: [
        { lesson: "Как происходила работа с API в React Router до версии 6.4.", time: "19:10" },
        { lesson: "Современный способ загрузки данных параметром loader", time: "07:24" },
        { lesson: "Современный способ обработки ошибок React Router 6.4+", time: "05:32" },
        { lesson: "Хук useNavigation для получения данных компонентом", time: "10:43" },
        { lesson: "Отправка данных параметром маршрута action", time: "07:42" },
        { lesson: "#10-PRACTICE-Router Data Loading p1 (Level-2)", time: "09:08" },
        { lesson: "#10-PRACTICE-Router Data Loading p2 (Level-2)", time: "09:00" },
        { lesson: "#10-PRACTICE-Router Data Loading p3 (Level-2)", time: "04:59" },
        { lesson: "Тест по блоку React Router 6.4+ Data Loading - (Level 2)", time: "5 questions" },
      ],
    },

    {
      id: uuidv4(),
      title: "Управление state через Context API",
      info: "6 лекций • 54м",
      lessons: [
        { lesson: "Подводим итоги всего курса", time: "06:14" },
        { lesson: "Как работает Context API", time: "09:51" },
        { lesson: "#11-PRACTICE-Context API на проекте Task List (Level-2)", time: "09:37" },
        { lesson: "Context API + Children prop", time: "18:33" },
        { lesson: "Небольшая ошибка которую вы могли допустить", time: "04:39" },
        { lesson: "Создаем кастомный хук для useContext", time: "05:07" },
        { lesson: "Тест по блоку Context API - (Level 2)", time: "5 questions" },
      ],
    },
    {
      id: uuidv4(),
      title: "Продвинутое управление состоянием - useReducer hook",
      info: "13 лекций • 1ч 45м",
      lessons: [
        { lesson: "Как работает оператор switch", time: "06:40" },
        { lesson: "Варианты использования useState", time: "05:16" },
        { lesson: "Знакомство с useReducer Hook", time: "09:46" },
        { lesson: "Работа useReducer шаг за шагом", time: "05:25" },
        { lesson: "Как работает функция dispatch", time: "05:29" },
        { lesson: "Объект в начальном состоянии вместо примитива", time: "08:10" },
        { lesson: "Дополнительно о useReducer", time: "10:33" },
        { lesson: "#12-PRACTICE-useReducer хук - (Level-2)", time: "11:58" },
        { lesson: "useReducer с загрузкой данных часть 1", time: "03:49" },
        { lesson: "useReducer с загрузкой данных часть 2", time: "11:31" },
        { lesson: "useReducer с загрузкой данных часть 3", time: "05:09" },
        { lesson: "useReducer с загрузкой данных часть 4", time: "11:05" },
        { lesson: "useReducer с загрузкой данных часть 5", time: "09:52" },
        { lesson: "Тест по блоку useReducer хук - (Level 2)", time: "10 questions" },
      ],
    },
    {
      id: uuidv4(),
      title: "Библиотека Redux With Thunks",
      info: "9 лекций • 1ч 18м",
      lessons: [
        { lesson: "Обзор проекта", time: "08:45" },
        { lesson: "Создаем initialState и функцию reducer", time: "08:54" },
        { lesson: "Как работает функция createStore и компонент Provider", time: "05:51" },
        { lesson: "Как работает функция dispatch", time: "07:02" },
        { lesson: "Получения state с помощью useSelector hook", time: "09:19" },
        { lesson: "Рефакторинг функции action для dispatch", time: "05:59" },
        { lesson: "Создание экшена удаления юзера", time: "03:48" },
        { lesson: "Как работает Redux Thunk", time: "13:17" },
        { lesson: "Как создавать и использовать несколько редьюсеров", time: "15:26" },
        { lesson: "Тест по блоку Redux With Thunk - (Level 2)", time: "10 questions" },
      ],
    },
    {
      id: uuidv4(),
      title: "RTK (Redux ToolKit) Современный Redux",
      info: "10 лекций • 1ч 23м",
      lessons: [
        { lesson: "Устанавливаем RTK в проект", time: "03:03" },
        { lesson: "Создаем файл store", time: "05:03" },
        { lesson: "Создаем 'слайс'", time: "11:36" },
        { lesson: "Используем 'экшены' из 'слайса'", time: "10:29" },
        { lesson: "#13-Practice-Добавьте функционал-(Level-2)", time: "08:27" },
        { lesson: "Redux Dev Extension для браузера", time: "05:12" },
        { lesson: "createAsyncThunk. Подгрузка пользователей", time: "11:13" },
        { lesson: "Обработка ошибок в createAsyncThunk", time: "11:20" },
        { lesson: "Дополнительные возможности createAsyncThunk", time: "04:40" },
        { lesson: "#13-Practice-Завершите приложение-(Level-2)", time: "11:59" },
        { lesson: "Тест по блоку RTK - (Level 2)", time: "8 questions" },
      ],
    },
    {
      id: uuidv4(),
      title: "Оптимизация проекта",
      info: "6 лекций • 45м",
      lessons: [
        { lesson: "Вкладка profiler в devTools", time: "07:55" },
        { lesson: "Как работает хук useMemo()", time: "10:09" },
        { lesson: "Как работает хук useCallBack()", time: "05:20" },
        { lesson: "Использование children вместо мемоизации", time: "04:49" },
        { lesson: "Ленивая загрузка компонентов", time: "06:55" },
        { lesson: "Компонент Suspense для статуса загрузки", time: "09:55" },
        { lesson: "Тест по блоку Оптимизация проекта - (Level 2)", time: "7 questions" },
      ],
    },
    {
      id: uuidv4(),
      title: "Деплой проекта",
      info: "3 лекции • 19м",
      lessons: [
        { lesson: "Хэширование изображений", time: "05:42" },
        { lesson: "Запускаем npm run build", time: "08:39" },
        { lesson: "Размещение проекта на хостинге", time: "04:59" },
      ],
    },
    {
      id: uuidv4(),
      title: "До новых встреч!",
      info: "1 лекция • 1м",
      lessons: [{ lesson: "До встречи на уроках!", time: "00:56" }],
    },
  ],
};

export default reactJsEssentialProgram;
